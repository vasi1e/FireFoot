<?php

namespace SiteBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use SiteBundle\Entity\Shoe;

/**
 * ShoeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShoeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * ModelRepository constructor.
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(Shoe::class));
    }

    /**
     * @param Shoe $shoe
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function saveShoe(Shoe $shoe)
    {
        $em = $this->getEntityManager();
        $em->persist($shoe);
        $em->flush();
    }

    /**
     * @param Shoe $shoe
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function updateShoe(Shoe $shoe)
    {
        $em = $this->getEntityManager();
        $em->merge($shoe);
        $em->flush();
    }

    public function findTop5MostLiked()
    {
        return $this->createQueryBuilder("s")
            ->where("s.condition = 'new'")
            ->orderBy("s.likes", "DESC")
            ->setMaxResults(5)
            ->getQuery()
            ->getResult();
    }

    public function findTop5LatestRelease()
    {
        return $this->createQueryBuilder("s")
            ->where("s.condition = 'new'")
            ->orderBy("s.uploadDateAndTime", "DESC")
            ->setMaxResults(5)
            ->getQuery()
            ->getResult();
    }

    public function getAllShoes()
    {
        return $this->createQueryBuilder("s")
            ->where("s.condition = 'new'")
            ->getQuery()
            ->getResult();
    }

    public function sortShoesBy($sortMethod, $order)
    {
        return $this->createQueryBuilder("s")
            ->where("s.condition = 'new'")
            ->orderBy("s." . $sortMethod, $order)
            ->getQuery()
            ->getResult();
    }
}
