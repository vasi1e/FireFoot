<?php

namespace SiteBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use SiteBundle\Entity\Shoe;

/**
 * ShoeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShoeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * ModelRepository constructor.
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(Shoe::class));
    }

    /**
     * @param Shoe $shoe
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function save(Shoe $shoe)
    {
        $em = $this->getEntityManager();
        $em->persist($shoe);
        $em->flush();
    }

    /**
     * @param Shoe $shoe
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function update(Shoe $shoe)
    {
        $em = $this->getEntityManager();
        $em->merge($shoe);
        $em->flush();
    }

    public function findTop5MostLiked()
    {
        return $this->createQueryBuilder("s")
            ->where("s.condition = 'new'")
            ->orderBy("s.likes", "DESC")
            ->setMaxResults(5)
            ->getQuery()
            ->getResult();
    }

    public function findTop5LatestRelease()
    {
        return $this->createQueryBuilder("s")
            ->where("s.condition = 'new'")
            ->orderBy("s.uploadDateAndTime", "DESC")
            ->setMaxResults(5)
            ->getQuery()
            ->getResult();
    }

    public function getAllShoes($brands, $sortMethod, $order)
    {
        if (is_null($brands) && is_null($sortMethod))
        {
            return $this->createQueryBuilder("s")
                ->where("s.condition = 'new'")
                ->getQuery()
                ->getResult();

        }
        else if (is_null($sortMethod) && !is_null($brands))
        {
            return $this->createQueryBuilder("s")
                ->where("s.condition = 'new'")
                ->andWhere("s.brand = ".$brands)
                ->getQuery()
                ->getResult();
        }
        else if (is_null($brands) && !is_null($sortMethod))
        {
            return $this->createQueryBuilder("s")
                ->where("s.condition = 'new'")
                ->orderBy("s." . $sortMethod, $order)
                ->getQuery()
                ->getResult();
        }
        else if (!is_null($brands) && !is_null($sortMethod))
        {
            return $this->createQueryBuilder("s")
                ->where("s.condition = 'new'")
                ->andWhere("s.brand = ".$brands)
                ->orderBy("s." . $sortMethod, $order)
                ->getQuery()
                ->getResult();
        }
    }
}
