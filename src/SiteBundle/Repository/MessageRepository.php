<?php

namespace SiteBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use SiteBundle\Entity\Message;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(Message::class));
    }

    /**
     * @param Message $message
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function save(Message $message)
    {
        $em = $this->getEntityManager();
        $em->persist($message);
        $em->flush();
    }

    /**
     * @param Message $message
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function update(Message $message)
    {
        $em = $this->getEntityManager();
        $em->merge($message);
        $em->flush();
    }

    public function getListOfChats($userId)
    {
        return $this->createQueryBuilder("m")
            ->select("IDENTITY(m.shoe), IDENTITY(m.sender), IDENTITY(m.recipient), m.read, m.chatId")
            ->where("m.sender = :userid OR m.recipient = :userid")
            ->setParameter("userid", $userId)
            ->orderBy("m.sendTime", "DESC")
            ->groupBy("m.chatId")
            ->getQuery()
            ->getResult();
    }

    public function isTheChatRead($chatId, $userId)
    {
        return $this->createQueryBuilder("m")
            ->select("m.read")
            ->where("m.chatId = :chatid")
            ->andWhere("m.recipient = :userid")
            ->setParameters(["chatid" => $chatId, "userid" => $userId])
            ->orderBy("m.sendTime", "DESC")
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
    }

    public function getChat($shoeId, $senderId, $recipientId)
    {
        return $this->createQueryBuilder("m")
            ->where("m.shoe = :shoeid")
            ->andWhere("m.sender = :userid OR m.sender = :userid2")
            ->andWhere("m.recipient = :userid OR m.recipient = :userid2")
            ->setParameters(["shoeid" => $shoeId, "userid" => $senderId, "userid2" => $recipientId])
            ->orderBy("m.sendTime")
            ->getQuery()
            ->getResult();
    }
}
